name: Deploy to GKE

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}

jobs:
  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        install_components: 'gke-gcloud-auth-plugin'
        export_default_credentials: true

    - name: Verify GCP credentials
      run: |
        # Verify project configuration
        gcloud config list project
        # Verify authentication
        gcloud auth list

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} \
          --zone ${{ secrets.GKE_ZONE }} \
          --project ${{ secrets.GCP_PROJECT }}

    - name: Verify kubectl configuration
      run: |
        kubectl version --client
        kubectl config get-contexts
        
    - name: Deploy to Kubernetes
      run: |
        # Apply any changes to ConfigMaps or Secrets first
        if [ -d "./k8s/configs" ]; then
          kubectl apply -f ./k8s/configs/
        fi
        
        # Apply main application manifests
        kubectl apply -f ./k8s/
        
        # Wait for deployments to be ready
        kubectl wait --for=condition=available --timeout=300s deployment --all -n default

    - name: Verify deployment
      run: |
        kubectl get deployments -o wide
        kubectl get services -o wide
        kubectl get pods -o wide

    - name: Post-deployment cleanup
      if: always()  # Run even if previous steps failed
      run: |
        # Add any cleanup steps here if needed
        echo "Deployment process completed"
